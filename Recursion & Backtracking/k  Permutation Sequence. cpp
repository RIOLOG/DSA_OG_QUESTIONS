Approach1: Time complexity: O(N! * N) +O(N! Log N!)

class Solution {
private:
    void helpme(int ind, vector<vector<int>>&ans, vector<int>& nums)
    {
        int n = nums.size();
        if (ind == n-1)
        {
            ans.push_back(nums);
            return;
        }
        
        for (int i=ind;i<n;i++)
        {
            swap(nums[i], nums[ind]);
            helpme(ind+1, ans, nums);
            
            //BACKTRACKING:
            swap(nums[ind], nums[i]);
        }
    }
public:
    string getPermutation(int n, int k) 
    {
        vector<vector<int>>ans;   
        vector<int>nums;
        for (int i=1;i<=n;i++)
        {
            nums.push_back(i);
        }
        helpme(0, ans, nums);
        sort(ans.begin(), ans.end());
        
        string s = "";
        
        //[[1,2,3], [1,3,2], [2,1,3], .....]
        
        for (auto x:ans[k-1])
        {
            s += to_string(x);
        }
        
        return s;
    }
};



//Appraoch 2: Time Complexity: O(N) * O(N) = O(N^2)

string ans = "";
        int fact = 1;
        vector<int>nums;
        
        for (int i=1;i<n;i++)
        {
            fact = fact * i;
            nums.push_back(i);
        }
        nums.push_back(n);
        
        k = k - 1;
        
        for (int i=1;i<=n;i++)
        {
            ans = ans + to_string(nums[k / fact]);
            nums.erase(nums.begin() + (k / fact));
            
            k = k % fact;
            if (nums.size() == 0)    break;
            fact = fact / nums.size();
        }
        
        return ans;