        //Brute-Force:
//         int MOD = 1e9+7;
//         long long sum = 0;
//         for (int i=0;i<nums.size();i++)
//         {
//             int mini = nums[i];
//             for (int j=i;j<nums.size();j++)
//             {
//                 mini = min(mini, nums[j]);
//                 sum += mini % MOD;
//             }
//         }
        
//         return sum % MOD;


// ----------------------------------------------------------------------------------

class Solution {
    int MOD = 1e9 + 7;
private:
    vector<int> nstl(vector<int> &v, int n)
    {
        vector<int> ans(n, 0);
        stack<int> st;
        for (int i=0;i<n;i++)
        {
            if (st.empty())
            {
                ans[i] = -1;
                st.push(i);
            }
            else
            {
                while(!st.empty() and v[st.top()] > v[i])   st.pop();
                if (st.empty())   ans[i] = -1;
                else              ans[i] = st.top();
                st.push(i);
            }
        }
        return ans;
    }
    
    vector<int> nstr(vector<int>& v, int n)
    {
        vector<int> ans(n, 0);
        stack<int> st;
        for (int i=n-1;i>=0;i--)
        {
            if (st.empty())
            {
                ans[i] = n;
                st.push(i);
            }
            else
            {
                while(!st.empty() and v[st.top()] >= v[i])   st.pop();
                if (st.empty())   ans[i] = n;
                else              ans[i] = st.top();
                st.push(i);
            }
        }
        return ans;
    }
    
public:
    int sumSubarrayMins(vector<int>& nums)
    {
        //Using Stack:
        vector<int>ansLeft = nstl(nums, nums.size());
        vector<int>ansRight = nstr(nums, nums.size());
        
        long long ans = 0;
        for (int i=0;i<nums.size();i++)
        {
            long long prod = ((ansRight[i] - i ) * (i - ansLeft[i]));
            prod = (prod * nums[i]) % MOD;
            ans += prod;
            
            ans = ans % MOD;
        }
        
        return ans;
    }
};